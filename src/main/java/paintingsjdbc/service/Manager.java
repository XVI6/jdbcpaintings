package paintingsjdbc.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import paintingsjdbc.domain.Painting;
import paintingsjdbc.domain.Reproduktor;

public class Manager {
	
	private Connection connection;
	
	private String url= "jdbc:hsqldb:hsql://localhost/workdb";
	
	
	private String createTableReproductor = "CREATE TABLE Reproductor ("
			+ "idReproduktor INTEGER GENERATED BY DEFAULT AS IDENTITY, "
			+ "name VARCHAR(20), country VARCHAR(20), "
			+ "city VARCHAR(20), adress VARCHAR(50),"
			+ "house_number VARCHAR(7), telephone VARCHAR(50), "
			+ "e_mail VARCHAR(50),"
			+ "PRIMARY KEY(idReproduktor))";
	
	private String createTablePainting = "CREATE TABLE IF NOT EXISTS Painting"
			+ "(idPainting bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
			+ " name VARCHAR(50) NOT NULL,"
			+ " yoc INTEGER, cost INTEGER,"
			+ " artist VARCHAR(20), origin_artist VARCHAR(20),"
			+ " id_Reproduktor INTEGER FOREIGN KEY REFERENCES Reproductor(idReproduktor))";
	
	
	
	
	//C
	private PreparedStatement addReproductorStmt; //5  	1.1
	private PreparedStatement addPaintingStmt; //5		1.2

	//R
	private PreparedStatement getAllReproductorStmt; //2  	2.1
	private PreparedStatement getAllPaintingStmt; 	//		2.2
	
	private PreparedStatement getPaintingIdByNameStmt;//		3.0
	private PreparedStatement getReproductorIdByNameStmt;//		3.1
	private PreparedStatement getFromReproduktorStmt; //3		3.2
	
	
	private PreparedStatement deleteReproductorFromPaintingStmt; // 4	4.1
	
	//U
	private PreparedStatement updateReproductorStmt;//		5.1
	private PreparedStatement updatePaintingStmt;//			5.2
	
	//D
	private PreparedStatement deleteReproductorStmt;//		6.1
	private PreparedStatement deletePaintingStmt;//			6.2
	

	// FK
	private PreparedStatement addReproductorToPaintingStmt;//	7.1
	
	private PreparedStatement clearReproductor;
	private PreparedStatement clearPainting;
	
	private Statement statement;
	
	
	
	
	
	
	public Manager(){
		
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();
			
			ResultSet result = connection.getMetaData().getTables(null, null, null, null);
			boolean table = false;
			
			while (result.next()) {
				if ("Reproductor".equalsIgnoreCase(result.getString("TABLE_NAME"))) {
					table = true;
					break;
				}
			}
			
			
			if (!table) {				
				statement.executeUpdate(createTableReproductor);
			}
			
			statement.executeUpdate(createTablePainting);
			
			// 1.1
			addReproductorStmt = connection.
					prepareStatement("INSERT INTO Reproductor ( name, country, city, adress, house_number, telephone, e_mail ) VALUES (?, ?, ?, ?, ?, ?, ?)");
			// 1.2
			addPaintingStmt = connection.
					prepareStatement("INSERT INTO Painting (name, yoc, cost, artist, origin_artist, id_Reproduktor) VALUES (?, ?, ?, ?, ?, ?)");
			
			
			// 2.1
			getAllReproductorStmt = connection.
					prepareStatement("SELECT * FROM Reproductor");
			// 2.2
			getAllPaintingStmt = connection.
					prepareStatement("SELECT * FROM Painting");
			
			// 3.0
			getPaintingIdByNameStmt = connection.
					prepareStatement("SELECT idPainting FROM Painting WHERE name = ? AND yoc = ?");
			// 3.1
			getReproductorIdByNameStmt = connection.
					prepareStatement("SELECT idReproduktor FROM Reproductor WHERE name = ? AND e_mail = ?");
			
			// 3.2
			getFromReproduktorStmt = connection.
					prepareStatement("SELECT * FROM Painting WHERE id_Reproduktor = ?");
			
			
			
			// 4.1
			deleteReproductorFromPaintingStmt = connection.
					prepareStatement("DELETE FROM Painting WHERE id_Reproduktor = ?");
			
			
			
			// 5.1
			updateReproductorStmt = connection.
					prepareStatement("UPDATE Reproductor SET name = ?, country = ?, city = ?, adress = ?, house_number = ?, telephone = ?, e_mail = ?"
							+ "WHERE idReproduktor = ?");
			// 5.2
			updatePaintingStmt = connection.
					prepareStatement("UPDATE Painting SET name = ?, yoc = ?, cost = ?, artist = ?, origin_artist = ?, id_Reproduktor = ?"
							+ "WHERE idPainting = ?");
			
			
			// 6.1
			deleteReproductorStmt = connection.
					prepareStatement("DELETE FROM Reproductor WHERE idReproduktor = ?");
			// 6.2
			deletePaintingStmt = connection.
					prepareStatement("DELETE FROM Painting WHERE idPainting = ?");
			
			
			
			//7.1
			addReproductorToPaintingStmt = connection.
					prepareStatement("UPDATE Painting SET id_Reproduktor = ? WHERE idPainting = ?");
			
			
			clearReproductor = connection.prepareStatement("DELETE FROM Reproductor");
			clearPainting = connection.prepareStatement("DELETE FROM Painting");
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}	
	}
	
	
	public void clear(){
		try {
			clearPainting.executeUpdate();
			clearReproductor.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	// 0 
	Connection getConnection() {
		return connection;
	}
	
	
	// 1.1
	public int addReproductor(Reproduktor reproduktor) {
		int counter = 0;
		
		
		try {
			
			addReproductorStmt.setString(1, reproduktor.getName());
			addReproductorStmt.setString(2, reproduktor.getCountry());
			addReproductorStmt.setString(3, reproduktor.getCity());
			addReproductorStmt.setString(4, reproduktor.getAdress());
			addReproductorStmt.setString(5, reproduktor.getHouse_number());
			addReproductorStmt.setString(6, reproduktor.getTelephone());
			addReproductorStmt.setString(7, reproduktor.getE_mail());
			
			
			counter = addReproductorStmt.executeUpdate();
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		
		return counter;
	}
	
	// 1.2  
	public int addPainting(Painting painting, String name, String e_mail) {
		int counter = 0;
		
		try {
			
			connection.setAutoCommit(false);
			
			
			painting.setId(getReproductorIdByName(name, e_mail));
			//System.out.println("Got: " + painting.getId());
			
			addPaintingStmt.setString(1, painting.getName()); 
			addPaintingStmt.setInt(2, painting.getYoc());
			addPaintingStmt.setInt(3, painting.getCost());
			addPaintingStmt.setString(4, painting.getArtist());
			addPaintingStmt.setString(5, painting.getOrigin_artist());
			addPaintingStmt.setLong(6, painting.getId());
			
			
			counter = addPaintingStmt.executeUpdate();
			connection.commit();
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
			try {
				connection.rollback();
			} catch (SQLException e2) {
				// TODO: handle exception
				e2.printStackTrace();
			}
		}
		try {
			connection.setAutoCommit(true);
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return counter;
	}
	
	
	
	// 2.1
	public List<Reproduktor> getAllReproductor() {
		List<Reproduktor> reproduktors = new ArrayList<Reproduktor>();
		
		try {
			ResultSet result = getAllReproductorStmt.executeQuery();
			
			while (result.next()) {
				Reproduktor r = new Reproduktor();
				r.setId(result.getLong("idReproduktor"));
				r.setName(result.getString("name"));
				r.setCountry(result.getString("country"));
				r.setCity(result.getString("city"));
				r.setAdress(result.getString("adress"));
				r.setAdress(result.getString("house_number"));
				r.setTelephone(result.getString("telephone"));
				r.setE_mail(result.getString("e_mail"));
				reproduktors.add(r);
			}
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return reproduktors;
	}
	
	//2.2
	public List<Painting> getAllPaintings() {
		List<Painting> paintings = new ArrayList<>();
		
		try {
			ResultSet result = getAllPaintingStmt.executeQuery();
			
			while (result.next()) {
				Painting r = new Painting();
				r.setId(result.getLong("idPainting"));
				r.setName(result.getString("name"));
				r.setYoc(result.getInt("yoc"));
				r.setCost(result.getInt("cost"));
				r.setArtist(result.getString("artist"));
				r.setOrigin_artist(result.getString("origin_artist"));
				r.setIdReproduktor(result.getLong("id_Reproduktor"));
				paintings.add(r);
			}
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return paintings;
	}
	
	
	
	
	
	
	//3.0 
	public long getPaintingIdByName(String name, int yoc) {
		long p = -1;
		
		try {
			getPaintingIdByNameStmt.setString(1, name);
			getPaintingIdByNameStmt.setInt(2, yoc);
			
			ResultSet result = getPaintingIdByNameStmt.executeQuery();
			
			result.next();
			p = result.getLong("idPainting");
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		
		return p;
	}
	
	
	//3.1
	public long getReproductorIdByName(String name, String e_mail) {
		long r = -1;
		
		try {
			
			getReproductorIdByNameStmt.setString(1, name);
			getReproductorIdByNameStmt.setString(2, e_mail);
			
			ResultSet result = getReproductorIdByNameStmt.executeQuery();
			
			result.next();
			r = result.getLong("idReproduktor"); 
			
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return r;
	}
	
	// 3.2
	public List<Painting> getFromReproduktor(Reproduktor reproduktor) {
		List<Painting> paintings = new ArrayList<Painting>();
		
		try {
			getFromReproduktorStmt.setLong(1, reproduktor.getId()); 
			
			ResultSet result = getFromReproduktorStmt.executeQuery();
			
			while (result.next()) {
				Painting painting = new Painting();
				
				painting.setId(result.getLong("idPainting"));
				painting.setName(result.getString("name"));
				painting.setYoc(result.getInt("yoc"));
				painting.setArtist(result.getString("artist"));
				painting.setOrigin_artist(result.getString("origin_artist"));
				painting.setIdReproduktor(result.getLong("id_Reproduktor"));
				
				paintings.add(painting);
			}
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}		
		return paintings;
	}

	
			
	// 4.1
	public int deleteReproductorFromPaintin(Painting painting) {
		
		int counter = 0;
		try {
			deleteReproductorFromPaintingStmt.setLong(1, painting.getId()); // add method to find id painting in painting
			
			counter = deleteReproductorFromPaintingStmt.executeUpdate();
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		
		return counter;
	}
	
	
	
	// 5.1
	public int updateReproductor(Reproduktor reproduktorOld, Reproduktor reproduktorNew) {
		
		int counter = 0;
		try {
			connection.setAutoCommit(false);

			updateReproductorStmt.setLong(8, getReproductorIdByName(reproduktorOld.getName(), reproduktorOld.getE_mail()));
			
			updateReproductorStmt.setString(1, reproduktorNew.getName());
			updateReproductorStmt.setString(2, reproduktorNew.getCountry());
			updateReproductorStmt.setString(3, reproduktorNew.getCity());
			updateReproductorStmt.setString(4, reproduktorNew.getAdress());
			updateReproductorStmt.setString(5, reproduktorNew.getHouse_number());
			updateReproductorStmt.setString(6, reproduktorNew.getTelephone());
			updateReproductorStmt.setString(7, reproduktorNew.getE_mail());
			
			
			counter = updateReproductorStmt.executeUpdate();
			connection.commit();
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
			try {
				connection.rollback();
			} catch (SQLException e2) {
				// TODO: handle exception
				e2.printStackTrace();
			}
		}
		try {
			connection.setAutoCommit(true);
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return counter;
	}
	
	//5.2
	public int UpdatePainting(Painting old_painting, Painting new_painting) {
		int counter = 0;
		
		try {
			
			connection.setAutoCommit(false);
			
			//updatePaintingStmt.setLong(7, getPaintingIdByName(old_painting.getName(), old_painting.getYoc()));
			
			updatePaintingStmt.setString(1, new_painting.getName());
			updatePaintingStmt.setInt(2, new_painting.getYoc());
			updatePaintingStmt.setInt(3, new_painting.getCost());
			updatePaintingStmt.setString(4, new_painting.getArtist());
			updatePaintingStmt.setString(5, new_painting.getOrigin_artist());
			updatePaintingStmt.setLong(6, old_painting.getIdReproduktor());
			updatePaintingStmt.setLong(7, old_painting.getId());
			
			counter = updatePaintingStmt.executeUpdate();  
			connection.commit();
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
			try {
				connection.rollback();
			} catch (SQLException e2) {
				// TODO: handle exception
				e2.printStackTrace();
			}
		}
		try {
			connection.setAutoCommit(true);
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return counter;
	}
	
	
	
	//6.1
	public int deleteReproductor(Reproduktor rep) {
		int counter = 0;
		
		try {
			deleteReproductorStmt.setLong(1, rep.getId());
			counter = deleteReproductorStmt.executeUpdate();
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return counter;
	}
	
	//6.2
	public int deletePainting(Painting p) {
		int counter = 0;
		
		try {
			
			deletePaintingStmt.setLong(1, p.getId());
			counter = deletePaintingStmt.executeUpdate();
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		
		return counter;
	}
	
	
	//7.1
	public int addReproductorToPainting(long idReproduktor, long idPainting) {
		int count = 0;
		
		try {
			
			addReproductorToPaintingStmt.setLong(1, idReproduktor);
			addReproductorToPaintingStmt.setLong(2, idPainting); 
			
			count = addReproductorToPaintingStmt.executeUpdate();
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}		
		
		return count;
	}
	
}