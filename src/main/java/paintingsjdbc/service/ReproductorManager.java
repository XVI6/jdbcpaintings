package paintingsjdbc.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import paintingsjdbc.domain.*;

public class ReproductorManager {
	
	private Connection connection;
	
	private String url= "jdbc:hsqldb:hsql://localhost/workdb";
	
	
	private String createTableReproductor = "CREATE TABLE IF NOT EXISTS Reproductor ("
			+ "idReproduktor INTEGER GENERATED BY DEFAULT AS IDENTITY, "
			+ "name VARCHAR(20), country VARCHAR(20), "
			+ "city VARCHAR(20), adress VARCHAR(50),"
			+ "house_number VARCHAR(7), telephone VARCHAR(50), "
			+ "e_mail VARCHAR(50),"
			+ "PRIMARY KEY(idReproduktor))";
	
	
	private PreparedStatement addReproductorStmt; //5 
	
	private PreparedStatement getAllReproductorStmt; //2
	
	//gora
	private PreparedStatement getReproductorIdByNameStmt; 

	private PreparedStatement deleteReproductorFromPaintingStmt; // 4
	
	
	private PreparedStatement updateReproductorStmt;
	
	private Statement statement;
	
	
	
	
	
	
	public ReproductorManager(){
		
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();
			
			ResultSet result = connection.getMetaData().getTables(null, null, null, null);
			boolean table = false;
			
			while (result.next()) {
				if ("Reproductor".equalsIgnoreCase(result.getString("TABLE_NAME"))) {
					table = true;
					break;
				}
			}
			
			if (!table) {
				
				statement.executeUpdate(createTableReproductor);
				
				addReproductorStmt = connection.prepareStatement("INSERT INTO Reproductor ( name, country, city, adress, house_number, telephone, e_mail ) "
						+ "VALUES (?, ?, ?, ?, ?, ?, ?)");
				
				getAllReproductorStmt = connection.prepareStatement("SELECT * FROM Reproductor");
				
				//gora
				getReproductorIdByNameStmt = connection.prepareStatement("SELECT idReproduktor FROM Reproductor WHERE name = ? AND e_mail = ?");
				
				deleteReproductorFromPaintingStmt = connection.prepareStatement("DELETE FROM Painting WHERE id_Reproduktor = ?");
				
				updateReproductorStmt = connection.prepareStatement("UPDATE Reproductor SET "
						+ "name = ?, country = ?, city = ?, adress = ?, house_number = ?, telephone = ?, e_mail = ? WHERE idReproduktor = ?");
				
			}
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}	
	}
	
	
		// 0 
		Connection getConnection() {
			return connection;
		}
		
		
		// 5 -- addReproductor
		// +
		public int addReproductor(Reproduktor reproduktor) {
			int counter = 0;
			
			try {
				
				addReproductorStmt.setString(1, reproduktor.getName());
				addReproductorStmt.setString(2, reproduktor.getCountry());
				addReproductorStmt.setString(3, reproduktor.getCity());
				addReproductorStmt.setString(4, reproduktor.getAdress());
				addReproductorStmt.setString(5, reproduktor.getHouse_number());
				addReproductorStmt.setString(6, reproduktor.getTelephone());
				addReproductorStmt.setString(7, reproduktor.getE_mail());
				
				counter = addReproductorStmt.executeUpdate();
				
			} catch (SQLException e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			return counter;
		}
		
		
	// 2 -- getAllReproductorStmt
	// +
	public List<Reproduktor> getAllReproductor() {
		List<Reproduktor> reproduktors = new ArrayList<Reproduktor>();
		
		try {
			ResultSet result = getAllReproductorStmt.executeQuery();
			
			while (result.next()) {
				Reproduktor r = new Reproduktor();
				r.setId(result.getLong("id"));
				r.setName(result.getString("name"));
				r.setCountry(result.getString("country"));
				r.setCity(result.getString("city"));
				r.setAdress(result.getString("adress"));
				r.setAdress(result.getString("house_number"));
				r.setTelephone(result.getString("telephone"));
				r.setE_mail(result.getString("e_mail"));
				reproduktors.add(r);
			}
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return reproduktors;
	}
	
	
	
	
	public long getReproductorIdByName(String name, String e_mail) {
		long r = 0;
		
		try {
			
			getReproductorIdByNameStmt.setString(1, name);
			getReproductorIdByNameStmt.setString(2, e_mail);
			
			ResultSet result = getReproductorIdByNameStmt.executeQuery();
			
			r = result.getLong("id");
			
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return r;
	}
	
	//////
	public int updateReproductor(Reproduktor reproduktorOld, Reproduktor reproduktorNew) {
		
		int counter = 0;
		try {
			connection.setAutoCommit(false);
			
			updateReproductorStmt.setString(1, reproduktorNew.getName());
			updateReproductorStmt.setString(2, reproduktorNew.getCountry());
			updateReproductorStmt.setString(3, reproduktorNew.getCity());
			updateReproductorStmt.setString(4, reproduktorNew.getAdress());
			updateReproductorStmt.setString(5, reproduktorNew.getHouse_number());
			updateReproductorStmt.setString(6, reproduktorNew.getTelephone());
			updateReproductorStmt.setString(7, reproduktorNew.getE_mail());
			
			updateReproductorStmt.setLong(8, getReproductorIdByName(reproduktorOld.getName(), reproduktorOld.getE_mail()));
			
			counter = updateReproductorStmt.executeUpdate();
			connection.commit();
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
			try {
				connection.rollback();
			} catch (SQLException e2) {
				// TODO: handle exception
				e2.printStackTrace();
			}
		}
		
		return counter;
	}
	
	
	
	// TO PAINTING ??????????????????????????
	// 4 -- deleteFromPainting                   NEAD TO ADD IN PAINTING      AND TRANSACTIONS !!!!!!!!!!!!!!!!!!!!!!!!!! 
		// +
		public int deleteReproductorFromPaintin(Painting painting) {
			
			int counter = 0;
			try {
				deleteReproductorFromPaintingStmt.setLong(1, painting.getId()); // add method to find id painting in painting
				
				counter = deleteReproductorFromPaintingStmt.executeUpdate();
				
			} catch (SQLException e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			
			return counter;
		}
	
	
	
	
	
	
}
