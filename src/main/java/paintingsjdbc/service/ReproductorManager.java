package paintingsjdbc.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import paintingsjdbc.domain.*;

public class ReproductorManager {
	
	private Connection connection;
	
	private String url= "jdbc:hsqldb:hsql://localhost/workdb";
	
	
	private String createTableReproductor = "CREATE TABLE Reproductor (id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name VARCHAR(20),country VARCHAR(20), city VARCHAR(20), adress VARCHAR(50),telephone VARCHAR(50), e_mail VARCHAR(50))";
	
	
	private PreparedStatement getFromPaintingsStmt;
	
	private PreparedStatement getAllReproductorStmt;

	private PreparedStatement aaa; //???????? przypisanie x do y
	
	private PreparedStatement deleteFromPaintingStmt;
	
	private PreparedStatement addReproductorStmt;
	
	
	
	private Statement statment;
	
	
	public ReproductorManager(){
		
		try {
			connection = DriverManager.getConnection(url);
			statment = connection.createStatement();
			
			ResultSet result = connection.getMetaData().getTables(null, null, null, null);
			boolean table = false;
			
			while (result.next()) {
				if ("Reproductor".equalsIgnoreCase(result.getString("TABLE_NAME"))) {
					table = true;
					break;
				}
			}
			
			if (!table) {
				
				statment.executeUpdate(createTableReproductor);
				
				
				getFromPaintingsStmt = connection.prepareStatement("SELECT * FROM Painting WHERE paintingId = ?");
				
				getAllReproductorStmt = connection.prepareStatement("SELECT * FROM Reproductor");
				
				//????
				
				deleteFromPaintingStmt = connection.prepareStatement("DELETE FROM Reproductor WHERE paintingId = ?");
				
				addReproductorStmt = connection.prepareStatement("INSERT INTO Reproductor ( name, country, city, adress, telephone, e_mail VALUES (?, ?, ?, ?, ?, ?)");
	/*
	private PreparedStatement getFromPaintings;
	
	private PreparedStatement getAllReproductor;

	private PreparedStatement aaa; //???????? przypisanie x do y
	
	private PreparedStatement deleteFromPainting;
	
	private PreparedStatement addReproductor;
	*/
			}
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}	
	}
	
	
	// 1 -- getFromPaintingsStmt 
	public List<Reproduktor> getFromPaintings(Painting painting) {
		List<Reproduktor> reproduktors = new ArrayList<Reproduktor>();
		
		try {
			getFromPaintingsStmt.setLong(3, painting.getId());
			ResultSet result = getFromPaintingsStmt.executeQuery();
			
			while (result.next()) {
				Reproduktor r = new Reproduktor();
				r.setId(result.getInt("id"));
				r.setName(result.getString("name"));
				r.setCountry(result.getString("country"));
				r.setCity(result.getString("city"));
				r.setAdress(result.getString("adress"));
				r.setTelephone(result.getString("telephone"));
				r.setE_mail(result.getString("e_mail"));
				reproduktors.add(r);
			}
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return reproduktors;
	}
	
	
	
	// 2 -- getAllReproductorStmt
	
	public List<Reproduktor> getAllReproductor() {
		List<Reproduktor> reproduktors = new ArrayList<Reproduktor>();
		
		try {
			ResultSet result = getAllReproductorStmt.executeQuery();
			
			while (result.next()) {
				Reproduktor r = new Reproduktor();
				r.setId(result.getInt("id"));
				r.setName(result.getString("name"));
				r.setCountry(result.getString("country"));
				r.setCity(result.getString("city"));
				r.setAdress(result.getString("adress"));
				r.setTelephone(result.getString("telephone"));
				r.setE_mail(result.getString("e_mail"));
				reproduktors.add(r);
			}
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return reproduktors;
	}
	
	
	// 3 -- ???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
	
	
	// 4 -- deleteFromPainting
	
	public void deleteFromPainting(Painting painting) {
		
		try {
			deleteFromPaintingStmt.setLong(3, painting.getId());
			
			deleteFromPaintingStmt.executeQuery();
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	
	// 5 -- addReproductor
	public int addReproductor(Reproduktor reproduktor) {
		int counter = 0;
		
		try {
			
			addReproductorStmt.setString(1, reproduktor.getName());
			addReproductorStmt.setString(2, reproduktor.getCountry());
			addReproductorStmt.setString(3, reproduktor.getCity());
			addReproductorStmt.setString(4, reproduktor.getAdress());
			addReproductorStmt.setString(5, reproduktor.getTelephone());
			addReproductorStmt.setString(6, reproduktor.getE_mail());
			
			counter = addReproductorStmt.executeUpdate();
			
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return counter;
	}
	
}
