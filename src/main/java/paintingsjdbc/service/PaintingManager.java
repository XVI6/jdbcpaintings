package paintingsjdbc.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.naming.spi.DirStateFactory.Result;

import paintingsjdbc.domain.Painting;
import paintingsjdbc.domain.Reproduktor;

public class PaintingManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	
	private String createTablePainting = "CREATE TABLE Painting(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20) NOT NULL, yoc INTEGER, artist varchar(20), IdReproduktor INTEGER NOT NULL REFERENCES Reproduktor(id))";
	
	
	
	private PreparedStatement getFromReproduktorStmt;
	
	private PreparedStatement getAllPaintingStmt;
	
	private PreparedStatement aaa; //????????????
	
	private PreparedStatement deleteFromReproductorStmt;
	
	private PreparedStatement addPaintingStmt;
	
	private PreparedStatement updatePaintingStmt;
	
	
	private Statement statement;
	
	
	
	public PaintingManager(){
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();
			
			ResultSet result = statement.getResultSet();  /////CHANGE!!!!!//  = connection.getMetaData().getTables(null, null, null, null);
			
			boolean table = false;
			
			while (result.next()) {
				if ("Painting".equalsIgnoreCase(result.getString("TABLE_NAME"))) {
					table = true;
					break;
				}
			}
			
			if (!table) {
				statement.executeUpdate(createTablePainting);
				
				
				getFromReproduktorStmt = connection.prepareStatement("SELECT * FROM Painting WHERE IdReproduktor = ?");
				
				getAllPaintingStmt = connection.prepareStatement("SELECT * FROM Painting");
				
				//????
				
				deleteFromReproductorStmt = connection.prepareStatement("DELETE FROM Painting WHERE IdReproduktor = ?");
				
				addPaintingStmt = connection.prepareStatement("INSERT INTO Painting (name, yoc, artist) VALUES (?, ?, ?)");
				
				updatePaintingStmt = connection.prepareStatement("UPDATE Painting SET name=?, yoc=?, artist=? WHERE id = ");
				
			}
			
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	
	
	
	/*
	private PreparedStatement getFromReproduktor;  pobranie x należących do y
	
	private PreparedStatement getAllPainting;  pobranie wszystkich y

	private PreparedStatement aaa; //???????? przypisanie x do y
	
	private PreparedStatement deleteFromReproductor;  usunięcie x z y
	
	private PreparedStatement addPainting;  dodanie do tabeli x, dodanie do tabeli y 
	
	
	*/
	
	
	
	// 1 getFromReproduktor
	private List<Painting> getFromReproduktor(Reproduktor reproduktor) {
		List<Painting> paintings = new ArrayList<Painting>();
		
		try {
			
			getFromReproduktorStmt.setLong(1, reproduktor.getId()); // 1- 3 
			
			ResultSet result = getFromReproduktorStmt.executeQuery();
			
			while (result.next()) {
				Painting painting = new Painting();
				
				painting.setId(result.getLong("id"));
				painting.setName(result.getString("name"));
				painting.setYoc(result.getInt("yoc"));
				painting.setArtist(result.getString("artist"));
				
				paintings.add(painting);
			}
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return paintings;
	}
	
	
	
	// 2 - getAllPainting
	private List<Painting> getAllPainting() {
		
		List<Painting> paintings = new ArrayList<Painting>();
		
		try {
			ResultSet result = getAllPaintingStmt.executeQuery();
			
			while (result.next()) {
				Painting painting = new Painting();
				
				painting.setId(result.getLong("id"));
				painting.setName(result.getString("name"));
				painting.setYoc(result.getInt("yoc"));
				painting.setArtist(result.getString("artist"));
				
				paintings.add(painting);
			}

		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return paintings;
	}
	
	
	// 3 - 
	
	
	
	
	// 4 - deleteFromReproductor
	
	
	
	public void deleteFromReproductor(Reproduktor reproductor) {
		
		try {
			deleteFromReproductorStmt.setLong(1, reproductor.getId()); // 3 - 1
			
			deleteFromReproductorStmt.executeQuery();
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	
	
	// 5 - addPainting
	
	public int addPainting(Painting painting) {
		int counter = 0;
		
		try {
			addPaintingStmt.setString(1, painting.getName());
			addPaintingStmt.setInt(2, painting.getYoc());
			addPaintingStmt.setString(3, painting.getArtist());
			
			counter = addPaintingStmt.executeUpdate();
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return counter;
	}
	
	
	//6
	
	public void updatePainting(long id, Painting painting) {
		
		try {
			
			updatePaintingStmt.setString(1, painting.getName());
			updatePaintingStmt.setInt(2, painting.getYoc());
			updatePaintingStmt.setString(3, painting.getArtist());
			updatePaintingStmt.setLong(4, id);
			
			updatePaintingStmt.executeUpdate();
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	
	
	
	
	
	
	
	
}