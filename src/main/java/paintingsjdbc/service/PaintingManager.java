package paintingsjdbc.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import paintingsjdbc.domain.Painting;
import paintingsjdbc.domain.Reproduktor;

import paintingsjdbc.service.*;

public class PaintingManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	
	private String createTablePainting = "CREATE TABLE IF NOT EXISTS Painting"
			+ "(idPainting bigint GENERATED BY DEFAULT AS IDENTITY,"
			+ " name varchar(20) NOT NULL,"
			+ " yoc INTEGER, cost INTEGER,"
			+ " artist varchar(20), origin_artist varchar(20),"
			+ " id_Reproduktor INTEGER "
			+ " PRIMARY KEY(idPainting)"
			+ " FOREIGN KEY REFERENCES Reproduktor(idReproduktor))";
	
	
	private PreparedStatement addPaintingStmt; //5
	
	private PreparedStatement getFromReproduktorStmt; //3
	
	//private PreparedStatement getAllPaintingStmt;
	
	private PreparedStatement addReproductorToPaintingStmt;
	
	//private PreparedStatement deleteFromReproductorStmt;
	
	
	//private PreparedStatement updatePaintingStmt;
	
	private Statement statement;
	
	
	
	
	
	
	
	
	
	public PaintingManager(){
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();
			
			statement.executeUpdate(createTablePainting);
			
			
			addPaintingStmt = connection.prepareStatement("INSERT INTO Painting (name, yoc, cost, artist, origin_artist, id_Reproduktor) VALUES (?, ?, ?, ?, ?, ?)");

			getFromReproduktorStmt = connection.prepareStatement("SELECT * FROM Painting WHERE id_Reproduktor = ?");
			
			//getAllPaintingStmt = connection.prepareStatement("SELECT * FROM Painting");
			
			//getIdFromReproduktorStmt = connection.prepareStatement("SELECT idReproduktor FROM Reproductor WHERE idReproduktor = ?");
			
			//deleteFromReproductorStmt = connection.prepareStatement("DELETE FROM Painting WHERE idReproduktor = ?");
			
			addReproductorToPaintingStmt = connection.prepareStatement("UPDATE Painting SET id_Reproduktor = ? WHERE idPainting = ? ");
			
			
			//updatePaintingStmt = connection.prepareStatement("UPDATE Painting SET name=?, yoc=?, artist=? WHERE idPainting = ?");
			
						
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	
	/*
	private PreparedStatement getFromReproduktor;  pobranie x należących do y
	
	private PreparedStatement getAllPainting;  pobranie wszystkich y

	private PreparedStatement addPaintingToReproductor; //???????? przypisanie x do y
	
	private PreparedStatement deleteFromReproductor;  usunięcie x z y
	
	private PreparedStatement addPainting;  dodanie do tabeli x, dodanie do tabeli y 
	
	
	*/
	
	// 0 
	Connection getConnection() {
		return connection;
	}
	
	
	// 5 - addPainting    --------------------------------------- 1 
	
	public int addPainting(Painting painting, String name, String e_mail) {
		int counter = 0;
		ReproductorManager rm = null;
		
		try {
			connection.setAutoCommit(false);
			
			addPaintingStmt.setLong(6, rm.getReproductorIdByName(name, e_mail));
			
			addPaintingStmt.setString(1, painting.getName()); 
			addPaintingStmt.setInt(2, painting.getYoc());
			addPaintingStmt.setInt(3, painting.getCost());
			addPaintingStmt.setString(4, painting.getArtist());
			addPaintingStmt.setString(5, painting.getOrigin_artist());
			
			counter = addPaintingStmt.executeUpdate();
			connection.commit();
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
			try {
				connection.rollback();
			} catch (SQLException e2) {
				// TODO: handle exception
				e2.printStackTrace();
			}
		}
		return counter;
	}
	
	
	
	// 1 getFromReproduktor
	public List<Painting> getFromReproduktor(Reproduktor reproduktor) {
		List<Painting> paintings = new ArrayList<Painting>();
		
		try {
			
			getFromReproduktorStmt.setLong(1, reproduktor.getId()); // 1- 3 
			
			ResultSet result = getFromReproduktorStmt.executeQuery();
			
			while (result.next()) {
				Painting painting = new Painting();
				
				painting.setId(result.getLong("id"));
				painting.setName(result.getString("name"));
				painting.setYoc(result.getInt("yoc"));
				
				painting.setArtist(result.getString("artist"));
				
				paintings.add(painting);
			}
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}		
		return paintings;
	}
	
	
	/*
	// 2 - getAllPainting
	public List<Painting> getAllPainting() {
		
		List<Painting> paintings = new ArrayList<Painting>();
		
		try {
			ResultSet result = getAllPaintingStmt.executeQuery();
			
			while (result.next()) {
				Painting painting = new Painting();
				
				painting.setId(result.getLong("id"));
				painting.setName(result.getString("name"));
				painting.setYoc(result.getInt("yoc"));
				painting.setArtist(result.getString("artist"));
				
				paintings.add(painting);
			}

		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return paintings;
	}		
	*/
	
	// 3 - 
	
	public int addReproductorToPainting(long idReproduktor, long idPainting) {
		int count = 0;
		
		try {
			
			addReproductorToPaintingStmt.setLong(1, idReproduktor); // 1- 3 
			addReproductorToPaintingStmt.setLong(2, idPainting); // 1- 3 
			
			count = addReproductorToPaintingStmt.executeUpdate();
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}		
		
		return count;
	}
	
	
	
	/*
	// 4 - deleteFromReproductor
	public void deleteFromReproductor(Reproduktor reproductor) {
		
		try {
			deleteFromReproductorStmt.setLong(1, reproductor.getId()); // 3 - 1
			
			deleteFromReproductorStmt.executeQuery();
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	*/
	
	
	/*
	//6
	public void updatePainting(long id, Painting painting) {
		
		try {
			
			updatePaintingStmt.setString(1, painting.getName());
			updatePaintingStmt.setInt(2, painting.getYoc());
			updatePaintingStmt.setString(3, painting.getArtist());
			updatePaintingStmt.setLong(4, id);
			
			updatePaintingStmt.executeUpdate();
			
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	*/
	
	
	
	
	
	
	
}